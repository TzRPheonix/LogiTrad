@page "/"
@inject IJSRuntime JSRuntime
@inject TranslationsService TranslationsService
@inject NavigationManager NavigationManager

@using ProjetTest.Data
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Runtime.InteropServices

<h1>Traduire</h1>

<label for="textToTranslate">Texte à traduire:</label>
<br />
<!-- Size of the entry (vh to adapt to android) -->
<textarea id="textToTranslate" rows="4" cols="100" style="width: 100%; height: 25vh;"></textarea>
<br />
<br />

<div style="display: flex; flex-wrap: wrap;">
    <!-- Possible language -->
    <div style="flex: 1; margin-right: 10px;">
        <label for="sourceLanguage">Langue source:</label>
        <select id="sourceLanguage">
            <option value="fr">Français</option>
            <option value="en">Anglais</option>
            <option value="es">Espagnol</option>
            <option value="de">Allemand</option>
            <option value="it">Italien</option>
        </select>
    </div>

    <div style="flex: 1;">
        <label for="targetLanguage">Langue de destination:</label>
        <select id="targetLanguage">
            <option value="en">Anglais</option>
            <option value="fr">Français</option>
            <option value="es">Espagnol</option>
            <option value="de">Allemand</option>
            <option value="it">Italien</option>
        </select>
    </div>
</div>

<button @onclick="Traduire">Traduire</button>
<br />
<br />

<!-- Display only if result -->
@if (!string.IsNullOrEmpty(Resultat))
{
    <h2>Résultat de la traduction:</h2>
    <p>@Resultat</p>
}

@code {
    private string Resultat = "";

    private async Task ShowNotification(string title, string message)
    {
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            await JSRuntime.InvokeVoidAsync("alert", $"{title}: {message}");
        }
    }

    private async Task Traduire()
    {
        try
        {
            var texte = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('textToTranslate').value");
            var langueSource = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('sourceLanguage').value");
            var langueDestination = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('targetLanguage').value");

            // API Access
            var url = $"https://api-free.deepl.com/v2/translate?auth_key=d7ec5f13-3a45-c5c3-1c20-6509b73d2c47:fx&text={texte}&source_lang={langueSource}&target_lang={langueDestination}";

            using var client = new HttpClient();
            var response = await client.GetAsync(url);
            response.EnsureSuccessStatusCode();

            var responseBody = await response.Content.ReadAsStringAsync();
            var deeplResponse = JsonSerializer.Deserialize<DeeplResponse>(responseBody);
            var traduction = deeplResponse.Translations[0].Text;

            // Create Translation object
            var translation = new Data.Translation
                {
                    OriginText = texte,
                    OriginLanguage = langueSource,
                    TargetText = traduction,
                    TargetLanguage = langueDestination
                };
            Resultat = traduction;
            // Inject it in the DB
            var createdTranslation = await TranslationsService.CreateTranslationAsync(translation);
            await ShowNotification("Traduction fini : ", "Sauvegardé dans 'Historique'.");
        }
        catch (HttpRequestException ex)
        {
            System.Diagnostics.Debug.WriteLine("Erreur de requête HTTP:");
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
        catch (JsonException ex)
        {
            System.Diagnostics.Debug.WriteLine("Erreur lecture JSON:");
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
    }

    public class Translation
    {
        [JsonPropertyName("detected_source_language")]
        public string DetectedSourceLanguage { get; set; }

        [JsonPropertyName("text")]
        public string Text { get; set; }
    }

    public class DeeplResponse
    {
        [JsonPropertyName("translations")]
        public List<Translation> Translations { get; set; }
    }
}
